import { vi } from "vitest";

global.localStorage = {
  getItem: vi.fn((key) => null),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
  key: vi.fn(),
  length: 0,
} as unknown as Storage;

// @ts-expect-error - Mocking chrome API
global.chrome = {
  cast: {
    initialize: vi.fn(),
    requestSession: vi.fn(),
    requestSessionById: vi.fn(),
    addReceiverActionListener: vi.fn(),
    removeReceiverActionListener: vi.fn(),
    logMessage: vi.fn(),
    setCustomReceivers: vi.fn(),
    setReceiverDisplayStatus: vi.fn(),
    unescape: vi.fn(),
    AutoJoinPolicy: global.chrome?.cast?.AutoJoinPolicy,
    DefaultActionPolicy: global.chrome?.cast?.DefaultActionPolicy,
    Capability: global.chrome?.cast?.Capability,
    ErrorCode: global.chrome?.cast?.ErrorCode,
    ReceiverAction: global.chrome?.cast?.ReceiverAction,
    ReceiverAvailability: global.chrome?.cast?.ReceiverAvailability,
    SenderPlatform: global.chrome?.cast?.SenderPlatform,
    ReceiverType: global.chrome?.cast?.ReceiverType,
    SessionStatus: global.chrome?.cast?.SessionStatus,
    VERSION: [],
    isAvailable: false,
    ApiConfig: undefined,
    Error: undefined,
    Image: undefined,
    SenderApplication: undefined,
    SessionRequest: undefined,
    Session: undefined,
    Receiver: undefined,
    ReceiverDisplayStatus: undefined,
    Volume: undefined,
    media: undefined,
  },
  accessibilityFeatures: {
    spokenFeedback: {
      get: vi.fn(),
      set: vi.fn(),
      clear: vi.fn(),
      onChange: {
        addListener: vi.fn(),
        removeListener: vi.fn(),
        hasListener: vi.fn(),
        getRules: vi.fn(),
        removeRules: vi.fn(),
        addRules: vi.fn(),
        hasListeners: vi.fn(),
      },
    },
    largeCursor: {
      get: vi.fn(),
      set: vi.fn(),
      clear: vi.fn(),
      onChange: {
        addListener: vi.fn(),
        removeListener: vi.fn(),
        hasListener: vi.fn(),
        getRules: vi.fn(),
        removeRules: vi.fn(),
        addRules: vi.fn(),
        hasListeners: vi.fn().mockImplementation(() => {
          throw new Error("Function not implemented.");
        }),
      },
    },
    stickyKeys: {
      get: vi.fn(),
      set: vi.fn(),
      clear: vi.fn(),
      onChange: {
        addListener: vi.fn(),
        removeListener: vi.fn(),
        hasListener: vi.fn(),
        getRules: vi.fn(),
        removeRules: vi.fn(),
        addRules: vi.fn(),
        hasListeners: vi.fn().mockImplementation(() => {
          throw new Error("Function not implemented.");
        }),
      },
    },
    highContrast: {
      get: vi.fn(),
      set: vi.fn(),
      clear: vi.fn(),
      onChange: {
        addListener: vi.fn(),
        removeListener: vi.fn(),
        hasListener: vi.fn(),
        getRules: vi.fn(),
        removeRules: vi.fn(),
        addRules: vi.fn(),
        hasListeners: vi.fn().mockImplementation(() => {
          throw new Error("Function not implemented.");
        }),
      },
    },
    // Repeat for other accessibility features...
  },
  action: {
    disable: vi.fn(),
    enable: vi.fn(),
    getBadgeBackgroundColor: vi.fn(),
    getBadgeText: vi.fn(),
    getPopup: vi.fn(),
    getTitle: vi.fn(),
    setBadgeBackgroundColor: vi.fn(),
    setBadgeText: vi.fn(),
    setIcon: vi.fn(),
    setPopup: vi.fn(),
    setTitle: vi.fn(),
    getBadgeTextColor: vi.fn(),
    getUserSettings: vi.fn(),
    isEnabled: vi.fn(),
    openPopup: vi.fn(),
    setBadgeTextColor: vi.fn(),
    onClicked: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn().mockImplementation(() => {
        throw new Error("Function not implemented.");
      }),
    },
  },
  alarms: {
    create: vi.fn(),
    getAll: vi.fn(),
    clearAll: vi.fn(),
    clear: vi.fn(),
    get: vi.fn(),
    onAlarm: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn().mockImplementation(() => {
        throw new Error("Function not implemented.");
      }),
    },
  },
  bookmarks: {
    create: vi.fn().mockImplementation(({ parentId, title, url }) => ({
      id: "mockBookmarkId",
      parentId,
      title,
      url,
    })),
    update: vi.fn().mockImplementation((id, changes) => ({
      id,
      ...changes,
    })),
    getChildren: vi.fn().mockResolvedValue([]),
    remove: vi.fn(),
    removeTree: vi.fn(),
    search: vi.fn(),
    getTree: vi.fn(),
    getRecent: vi.fn(),
    get: vi.fn(),
    move: vi.fn(),
    getSubTree: vi.fn(),
    MAX_WRITE_OPERATIONS_PER_HOUR: 1000,
    MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE: 100,
    onRemoved: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onChanged: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onImportEnded: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onImportBegan: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onMoved: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onCreated: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onChildrenReordered: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
  },
  runtime: {
    id: "mock-extension-id",
    ContextType: {
      // @ts-expect-error - Mocking chrome API
      BACKGROUND: global.chrome?.runtime?.ContextType?.BACKGROUND,
      // @ts-expect-error - Mocking chrome API
      TAB: global.chrome?.runtime?.ContextType?.TAB,
      // @ts-expect-error - Mocking chrome API
      POPUP: global.chrome?.runtime?.ContextType?.POPUP,
      // @ts-expect-error - Mocking chrome API
      OFFSCREEN_DOCUMENT:
        global.chrome?.runtime?.ContextType?.OFFSCREEN_DOCUMENT,
      // @ts-expect-error - Mocking chrome API
      SIDE_PANEL: global.chrome?.runtime?.ContextType?.SIDE_PANEL,
    },
    OnInstalledReason: {
      // @ts-expect-error - Mocking chrome API
      INSTALL: global.chrome?.runtime?.OnInstalledReason?.INSTALL,
      // @ts-expect-error - Mocking chrome API
      UPDATE: global.chrome?.runtime?.OnInstalledReason?.UPDATE,
      // @ts-expect-error - Mocking chrome API
      CHROME_UPDATE: global.chrome?.runtime?.OnInstalledReason?.CHROME_UPDATE,
      // @ts-expect-error - Mocking chrome API
      SHARED_MODULE_UPDATE:
        global.chrome?.runtime?.OnInstalledReason?.SHARED_MODULE_UPDATE,
    },
    lastError: undefined,
    getURL: vi.fn((path) => `chrome-extension://${path}`),
    connect: vi.fn(),
    connectNative: vi.fn(),
    getBackgroundPage: vi.fn(),
    getContexts: vi.fn(),
    getManifest: vi.fn(),
    getPackageDirectoryEntry: vi.fn(),
    getPlatformInfo: vi.fn(),
    openOptionsPage: vi.fn(),
    reload: vi.fn(),
    requestUpdateCheck: vi.fn(),
    restart: vi.fn(),
    restartAfterDelay: vi.fn(),
    sendMessage: vi.fn(),
    sendNativeMessage: vi.fn(),
    setUninstallURL: vi.fn(),
    onConnect: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onConnectExternal: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onInstalled: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onMessage: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onMessageExternal: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onRestartRequired: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onStartup: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onSuspend: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onSuspendCanceled: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onUpdateAvailable: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onBrowserUpdateAvailable: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onUserScriptConnect: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onUserScriptMessage: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
  },
  storage: {
    AccessLevel: {
      TRUSTED_AND_UNTRUSTED_CONTEXTS: "TRUSTED_AND_UNTRUSTED_CONTEXTS",
      TRUSTED_CONTEXTS: "TRUSTED_CONTEXTS",
    },
    local: {
      get: vi.fn().mockImplementation((keys, callback) => {
        const data = { BOOKMARK_PARENT_ID: "default_parent_id" };
        if (callback) callback(data);
        return Promise.resolve(data);
      }),
      set: vi.fn().mockImplementation((items, callback) => {
        if (callback) callback();
        return Promise.resolve();
      }),
      remove: vi.fn().mockImplementation((keys, callback) => {
        if (callback) callback();
        return Promise.resolve();
      }),
      clear: vi.fn().mockImplementation((callback) => {
        if (callback) callback();
        return Promise.resolve();
      }),
      QUOTA_BYTES: 102400,
      getBytesInUse: vi.fn().mockResolvedValue(0),
      setAccessLevel: vi.fn(),
      onChanged: {
        addListener: vi.fn(),
        removeListener: vi.fn(),
        hasListener: vi.fn(),
        getRules: vi.fn(),
        removeRules: vi.fn(),
        addRules: vi.fn(),
        hasListeners: vi.fn(),
      },
    },
    sync: {
      get: vi.fn(),
      set: vi.fn(),
      remove: vi.fn(),
      clear: vi.fn(),
      QUOTA_BYTES: 102400,
      QUOTA_BYTES_PER_ITEM: 8192,
      MAX_ITEMS: 512,
      MAX_WRITE_OPERATIONS_PER_HOUR: 1800,
      MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE: 120,
      MAX_WRITE_OPERATIONS_PER_MINUTE: 120,
      getBytesInUse: vi.fn(),
      setAccessLevel: vi.fn(),
      onChanged: {
        addListener: vi.fn(),
        removeListener: vi.fn(),
        hasListener: vi.fn(),
        getRules: vi.fn(),
        removeRules: vi.fn(),
        addRules: vi.fn(),
        hasListeners: vi.fn(),
      },
    },
    managed: {
      get: vi.fn(),
      getBytesInUse: vi.fn(),
      clear: vi.fn(),
      set: vi.fn(),
      remove: vi.fn(),
      setAccessLevel: vi.fn(),
      onChanged: {
        addListener: vi.fn(),
        removeListener: vi.fn(),
        hasListener: vi.fn(),
        getRules: vi.fn(),
        removeRules: vi.fn(),
        addRules: vi.fn(),
        hasListeners: vi.fn(),
      },
    },
    session: {
      get: vi.fn(),
      set: vi.fn(),
      remove: vi.fn(),
      clear: vi.fn(),
      QUOTA_BYTES: 102400,
      getBytesInUse: vi.fn(),
      setAccessLevel: vi.fn(),
      onChanged: {
        addListener: vi.fn(),
        removeListener: vi.fn(),
        hasListener: vi.fn(),
        getRules: vi.fn(),
        removeRules: vi.fn(),
        addRules: vi.fn(),
        hasListeners: vi.fn(),
      },
    },
    onChanged: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
  },
  tabs: {
    query: vi
      .fn()
      .mockResolvedValue([
        { id: 1, url: "https://example.com", pinned: false },
      ]),
    executeScript: vi.fn(),
    get: vi.fn(),
    getAllInWindow: vi.fn(),
    getCurrent: vi.fn(),
    getSelected: vi.fn(),
    remove: vi.fn(),
    captureVisibleTab: vi.fn(),
    reload: vi.fn(),
    duplicate: vi.fn(),
    sendMessage: vi.fn(),
    sendRequest: vi.fn(),
    connect: vi.fn(),
    create: vi.fn(),
    move: vi.fn(),
    update: vi.fn(),
    insertCSS: vi.fn(),
    highlight: vi.fn(),
    detectLanguage: vi.fn(),
    setZoom: vi.fn(),
    getZoom: vi.fn(),
    setZoomSettings: vi.fn(),
    getZoomSettings: vi.fn(),
    discard: vi.fn(),
    goForward: vi.fn(),
    goBack: vi.fn(),
    group: vi.fn(),
    ungroup: vi.fn(),
    onHighlighted: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onRemoved: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onCreated: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onActivated: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onReplaced: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onSelectionChanged: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onUpdated: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onAttached: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onMoved: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onDetached: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onActiveChanged: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onHighlightChanged: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onZoomChange: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    TAB_ID_NONE: -1 as const,
  },
  windows: {
    get: vi.fn().mockResolvedValue({ id: 1 }),
    create: vi.fn().mockResolvedValue({ id: 1 }),
    getCurrent: vi.fn(),
    getAll: vi.fn(),
    update: vi.fn(),
    remove: vi.fn(),
    getLastFocused: vi.fn(),
    WINDOW_ID_CURRENT: -2 as const,
    WINDOW_ID_NONE: -1 as const,
    onRemoved: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onFocusChanged: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onBoundsChanged: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
    onCreated: {
      addListener: vi.fn(),
      removeListener: vi.fn(),
      hasListener: vi.fn(),
      getRules: vi.fn(),
      removeRules: vi.fn(),
      addRules: vi.fn(),
      hasListeners: vi.fn(),
    },
  },
};

(global as any).CONFIG_RO = {
  BOOKMARK_PARENT_ID: vi.fn().mockResolvedValue("default_parent_id"),
  INSTANCE_ID: vi.fn().mockResolvedValue("mock_instance_id"),
};
